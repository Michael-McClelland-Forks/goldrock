name: 'state'

on:
  push:
    branches:
      - main
  pull_request:

env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  COMPANY_IDENTIFIER: goldrock
  WORKING_DIRECTORY: ./state/
  region: us-east-2

concurrency: state

jobs:
  setup:
    name: 'state-exists-check'
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      bucket_exists: ${{steps.s3bucket.outputs.bucket_exists}}
      key_exists: ${{steps.kmskey.outputs.kms_key_exists}}
      dynamodb_table_exists: ${{steps.dynamodbtable.outputs.dynamodb_table_exists}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/${{env.COMPANY_IDENTIFIER}}-github-actions
          aws-region: us-east-2
          mask-aws-account-id: false

      - name: s3bucket
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          aws sts get-caller-identity
          echo "Checking if S3 bucket exists..."
          S3_BUCKET_EXISTS_CHECK=$(aws s3 ls ${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}} 2>&1)
          if [ $? != 0 ]
            then
              NO_BUCKET_CHECK=$(echo $S3_BUCKET_EXISTS_CHECK | grep -c 'NoSuchBucket')
              echo $NO_BUCKET_CHECK
              if [ $NO_BUCKET_CHECK = 1 ]; then
                BUCKET_EXISTS=false >> "$GITHUB_ENV"
              else
                echo "$S3_BUCKET_EXISTS_CHECK"
                exit 1
              fi
          else
            BUCKET_EXISTS=true >> "$GITHUB_ENV"
          fi

      - name: kmskey
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          echo "Checking if KMS key exists..."
          KEY_EXISTS=false
          KMS_KEY_EXISTS_CHECK=$(aws kms describe-key --key-id arn:aws:kms:us-east-2:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.COMPANY_IDENTIFIER}}-tfstate 2>&1)
          KMS_KEY_ACCOUNT=$(echo $KMS_KEY_EXISTS_CHECK | jq -r '.KeyMetadata.AWSAccountId')
          [ $KMS_KEY_ACCOUNT = "${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}" ] && echo KEY_EXISTS=true >> "$GITHUB_ENV" || KEY_EXISTS=false >> "$GITHUB_ENV"

      - name: dynamodbtable
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          echo "Checking if DynamoDB table exists..."
          DYNAMODB_TABLE_EXISTS=false
          DYNAMODB_TABLE_EXISTS_CHECK=$( aws dynamodb describe-table --table-name arn:aws:dynamodb:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:table/${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}} | jq -r '.Table.TableArn' 2>&1)
          DYNAMODB_ACCOUNT=$(echo $DYNAMODB_TABLE_EXISTS_CHECK | cut -d ":" -f5)
          [ "$DYNAMODB_ACCOUNT" = "${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}" ] && echo DYNAMODB_TABLE_EXISTS=true >> "$GITHUB_ENV" || DYNAMODB_TABLE_EXISTS=false >> "$GITHUB_ENV"

      - name: myoutputs
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          echo ${{ env.BUCKET_EXISTS }}
          echo ${{ env.KEY_EXISTS }}
          echo ${{ env.DYNAMODB_TABLE_EXISTS }}

      # - name: Terraform init
      #   working-directory: ${{env.WORKING_DIRECTORY}}
      #   run: |
      #     terraform init \
      #       -backend-config="bucket=${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
      #       -backend-config="dynamodb_table=arn:aws:dynamodb:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:table/${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
      #       -backend-config="kms_key_id=arn:aws:kms:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.COMPANY_IDENTIFIER}}-tfstate" \
      #       -backend-config="key=${{env.region}}-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-$GITHUB_WORKFLOW" \
      #       -backend-config="region=${{env.region}}" \
      #       -backend-config="encrypt=true"

      # - name: Terraform format check
      #   working-directory: ${{env.WORKING_DIRECTORY}}
      #   run: terraform fmt -check

      # - name: Terraform plan
      #   working-directory: ${{env.WORKING_DIRECTORY}}
      #   run: terraform plan -out plan
      #   env:
      #     TF_VAR_management_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
      #     TF_VAR_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
      #     TF_VAR_region: ${{env.region}}
      #     TF_VAR_ref: ${{github.ref_name}}
      #     TF_VAR_company_identifier: ${{env.COMPANY_IDENTIFIER}}

      # - name: Terraform apply
      #   working-directory: ${{env.WORKING_DIRECTORY}}
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply plan
