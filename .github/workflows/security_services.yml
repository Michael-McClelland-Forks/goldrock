name: 'security_services'

on:
  push:
    branches:
      - main
  pull_request:

env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  COMPANY_IDENTIFIER: goldrock
  WORKING_DIRECTORY: ./regional/us-east-2/security_services/

concurrency: security_services

jobs:
  setup:
    name: 'setup'
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      account_ids: ${{steps.get_security_account.outputs.security_account_id}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/${{env.COMPANY_IDENTIFIER}}-github-actions
          aws-region: us-east-2
          mask-aws-account-id: false

      - name: Identify Security Account
        id: get_security_account
        run: |
          GUARDDUTY_ACCOUNT_ID=$(aws organizations list-delegated-administrators --service-principal guardduty.amazonaws.com | jq '.DelegatedAdministrators[0].Id')
          SECURITYHUB_ACCOUNT_ID=$(aws organizations list-delegated-administrators --service-principal securityhub.amazonaws.com | jq '.DelegatedAdministrators[0].Id')
          [ "$GUARDDUTY_ACCOUNT_ID" = "$SECURITYHUB_ACCOUNT_ID" ] && echo "security_account_id="$(aws guardduty list-organization-admin-accounts | jq '.AdminAccounts[0].AdminAccountId') >> "$GITHUB_OUTPUT" || exit r-66y
  deploy:
    name: 'deploy'
    runs-on: ubuntu-22.04

    needs: setup

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{steps.get_security_account.outputs.security_account_id}}:role/${{env.COMPANY_IDENTIFIER}}-github-actions
          aws-region: us-east-2
          mask-aws-account-id: false
          

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-us-east-2" \
            -backend-config="dynamodb_table=arn:aws:dynamodb:us-east-2:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:table/${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-us-east-2" \
            -backend-config="kms_key_id=arn:aws:kms:us-east-2:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.COMPANY_IDENTIFIER}}-tfstate" \
            -backend-config="key=us-east-2-${{steps.get_security_account.outputs.security_account_id}}-$GITHUB_WORKFLOW" \
            -backend-config="region=us-east-2" \
            -backend-config="encrypt=true"

      - name: Terraform format check
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform fmt -check

      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform plan -out plan
        env:
          TF_VAR_management_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          #TF_VAR_account_id: ${{matrix.account_id}}
          #TF_VAR_region: ${{matrix.region}}
          TF_VAR_ref: ${{github.ref_name}}
          TF_VAR_company_identifier: ${{env.COMPANY_IDENTIFIER}}

      - name: Terraform apply
        working-directory: ${{env.WORKING_DIRECTORY}}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply plan
