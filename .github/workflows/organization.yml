name: 'organization'

on:
  workflow_run:
    workflows: ["state"]
    types:
      - completed

env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  COMPANY_IDENTIFIER: goldrock
  WORKING_DIRECTORY: ./organization/
  region: us-east-2

concurrency: organization

jobs:
  setup:
    name: 'setup'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/${{env.COMPANY_IDENTIFIER}}-github-actions
          aws-region: us-east-2
          mask-aws-account-id: false

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
            -backend-config="dynamodb_table=arn:aws:dynamodb:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:table/${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
            -backend-config="kms_key_id=arn:aws:kms:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.COMPANY_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{env.region}}-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-$GITHUB_WORKFLOW" \
            -backend-config="region=${{env.region}}" \
            -backend-config="encrypt=true"

      - name: Terraform format check
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform fmt -check

      - name: orgaization import check
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          if [ ! -z "$( terraform state show aws_organizations_organization.organization 2>/dev/null)" ];
          then
            echo ORGANIZATION_EXISTS=true >> "$GITHUB_ENV"
          else
            terraform import aws_organizations_organization.organization $(aws organizations describe-organization | jq -r '.Organization.Id')
          fi

      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform plan -out plan
        env:
          TF_VAR_management_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_region: ${{env.region}}
          TF_VAR_ref: ${{github.ref_name}}
          TF_VAR_company_identifier: ${{env.COMPANY_IDENTIFIER}}

      - name: Terraform apply
        working-directory: ${{env.WORKING_DIRECTORY}}
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_run'
        run: terraform apply plan
