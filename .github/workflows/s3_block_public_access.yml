name: 's3_block_public_access'

on:
  workflow_run:
    workflows: ["organization"]
    types:
      - completed

env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  COMPANY_IDENTIFIER: goldrock
  WORKING_DIRECTORY: ./global/s3_block_public_access/

concurrency: s3_block_public_access

jobs:
  setup:
    name: 'setup'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      account_ids: ${{steps.list_accounts.outputs.account_ids}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/${{env.COMPANY_IDENTIFIER}}-github-actions
          aws-region: us-east-2
          mask-aws-account-id: false

      - name: List accounts
        id: list_accounts
        run: |
          echo "account_ids="$(aws organizations list-accounts | jq '.Accounts | map(select(.Status == "ACTIVE")) | map(.Id)') >> "$GITHUB_OUTPUT"
  deploy:
    name: 'deploy'
    runs-on: ubuntu-latest

    needs: setup

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        account_id: ${{fromJson(needs.setup.outputs.account_ids)}}
        region:
          - us-east-2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{matrix.account_id}}:role/${{env.COMPANY_IDENTIFIER}}-github-actions
          aws-region: ${{matrix.region}}
          mask-aws-account-id: false

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{matrix.region}}" \
            -backend-config="dynamodb_table=arn:aws:dynamodb:${{matrix.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:table/${{env.COMPANY_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{matrix.region}}" \
            -backend-config="kms_key_id=arn:aws:kms:${{matrix.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.COMPANY_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{matrix.region}}-${{matrix.account_id}}-$GITHUB_WORKFLOW" \
            -backend-config="region=${{matrix.region}}" \
            -backend-config="encrypt=true"

      - name: Terraform format check
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform fmt -check

      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform plan -out plan
        env:
          TF_VAR_management_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_account_id: ${{matrix.account_id}}
          TF_VAR_region: ${{matrix.region}}
          TF_VAR_ref: ${{github.ref_name}}
          TF_VAR_company_identifier: ${{env.COMPANY_IDENTIFIER}}

      - name: Terraform apply
        working-directory: ${{env.WORKING_DIRECTORY}}
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_run'
        run: terraform apply plan
